编辑一个bash脚本: vim test.sh;#!/bin/bash;echo "hello"
运行脚本: chmod +x ./test.sh;./test.sh;/bin/sh test.sh
文件操作: ls;cd;pwd;mkdir;rmdir;cp;rm;mv;ll
文件属性: drwxr-xr--;d=文件类型是目录(-=文件);rwx=拥有者权限(读写执行);r-x=所属用户组权限;r--其他人权限
修改文件权限: chmod 754 文件名=jhdrwxr-xr
网络状态: netstat -t=tcp;-u=udp;-l=正在监听的端口;-n以数字显示地址和端口;-p显示pid
性能: top;ps -aux;
管道符: "|" 把左边命令的结果传递到右边的命令比如 ls | grep 'bin'
grep: 可以跟正则;-i 忽略大小写;-n 显示行数; -c 统计行数; -o 显示匹配到的字符串; -v 排除; -E 使用egrep; 比如 grep \bpass\b -ino test.log
sed: 流编辑器,一次处理一行数据; -n 只显示结果;-e 使用脚本; -f 使用文件夹内的所有脚本;
sed脚本: sed -e'4 a new' 在第4行新增一个字符串new; sed -e '2,5d',删除2-5行
awk: 逐行读取文件,以空格分隔,一个一个执行;
bash新建变量: n=""nzme"" ; nnn=(a b c d)
调用: echo $n; echo ${nnn[0]};${nnn[*]};${nnn[@]};*和@都是取数组所有值
if: if [[ $a > $b ]]; then echo ">"; else echo "!>"; fi 空格很严格
if中的等于大于小于: -eq;-gt;-;lt; if [ $a -eq $b ];-ne不等; -ge大于等于;-le小于等于
for: for loop in 1 2 3; do ...; done
while: while(($a<5)); while read line; do echo $line; done<test.txt
read: read var1 var2 var3... 默认赋值给REPLY
sh脚本中的默认取值变量,可以在脚本运行时输出: $0 脚本名称;$1~$100 获取到的第1~100个参数; $# 参数个数; $$ 当前脚本进程ID; $* 以一个字符串显示所有传递的参数; $? 显示最后一个命令退出状态, 0表示无错误
sh脚本中的运算: 要用反引号`expr $a + $b`;`expr $a - $b`;`expr $a \* $b`;`expr $a / $b`;
赋值: = 赋值;% 取余; == 相等; !=;
统计内存使用: for i in `ps aux | awk '{print $6}' | grep -v 'RSS'`;count=$[$count+$i];echo "$count/kb"